function cov_2bjogczmt7(){var path="D:\\CAPGEMINI\\MEANSTACK\\CASE STUDY\\RAILWAY\\BACKEND\\trains\\trains.js";var hash="a5d4b03256fe3bdfc3d0c65b7d4f3b02e95b1434";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\CAPGEMINI\\MEANSTACK\\CASE STUDY\\RAILWAY\\BACKEND\\trains\\trains.js",statementMap:{"0":{start:{line:2,column:14},end:{line:2,column:32}},"1":{start:{line:3,column:10},end:{line:3,column:19}},"2":{start:{line:6,column:17},end:{line:6,column:39}},"3":{start:{line:7,column:0},end:{line:7,column:27}},"4":{start:{line:10,column:15},end:{line:10,column:34}},"5":{start:{line:13,column:0},end:{line:15,column:3}},"6":{start:{line:14,column:2},end:{line:14,column:56}},"7":{start:{line:18,column:11},end:{line:18,column:26}},"8":{start:{line:19,column:0},end:{line:19,column:16}},"9":{start:{line:22,column:19},end:{line:22,column:43}},"10":{start:{line:23,column:16},end:{line:23,column:45}},"11":{start:{line:25,column:21},end:{line:41,column:1}},"12":{start:{line:42,column:18},end:{line:42,column:46}},"13":{start:{line:43,column:0},end:{line:43,column:66}},"14":{start:{line:46,column:0},end:{line:46,column:19}},"15":{start:{line:47,column:12},end:{line:47,column:35}},"16":{start:{line:112,column:0},end:{line:135,column:3}},"17":{start:{line:113,column:15},end:{line:122,column:3}},"18":{start:{line:124,column:12},end:{line:124,column:31}},"19":{start:{line:126,column:2},end:{line:132,column:4}},"20":{start:{line:127,column:4},end:{line:127,column:36}},"21":{start:{line:129,column:4},end:{line:131,column:5}},"22":{start:{line:130,column:6},end:{line:130,column:16}},"23":{start:{line:133,column:2},end:{line:133,column:48}},"24":{start:{line:134,column:2},end:{line:134,column:24}},"25":{start:{line:151,column:0},end:{line:160,column:3}},"26":{start:{line:153,column:2},end:{line:159,column:4}},"27":{start:{line:154,column:4},end:{line:154,column:21}},"28":{start:{line:156,column:4},end:{line:158,column:5}},"29":{start:{line:157,column:6},end:{line:157,column:16}},"30":{start:{line:184,column:0},end:{line:189,column:3}},"31":{start:{line:185,column:3},end:{line:188,column:6}},"32":{start:{line:186,column:5},end:{line:186,column:24}},"33":{start:{line:186,column:14},end:{line:186,column:24}},"34":{start:{line:187,column:5},end:{line:187,column:20}},"35":{start:{line:234,column:0},end:{line:239,column:3}},"36":{start:{line:235,column:3},end:{line:238,column:6}},"37":{start:{line:236,column:5},end:{line:236,column:24}},"38":{start:{line:236,column:14},end:{line:236,column:24}},"39":{start:{line:237,column:5},end:{line:237,column:20}},"40":{start:{line:279,column:0},end:{line:285,column:3}},"41":{start:{line:280,column:2},end:{line:284,column:4}},"42":{start:{line:281,column:4},end:{line:283,column:6}},"43":{start:{line:282,column:6},end:{line:282,column:39}},"44":{start:{line:325,column:0},end:{line:331,column:3}},"45":{start:{line:326,column:2},end:{line:330,column:4}},"46":{start:{line:327,column:4},end:{line:329,column:6}},"47":{start:{line:328,column:6},end:{line:328,column:23}},"48":{start:{line:371,column:0},end:{line:373,column:3}},"49":{start:{line:372,column:2},end:{line:372,column:63}},"50":{start:{line:375,column:0},end:{line:375,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:89},end:{line:13,column:90}},loc:{start:{line:13,column:93},end:{line:15,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:112,column:18},end:{line:112,column:19}},loc:{start:{line:112,column:29},end:{line:135,column:1}},line:112},"2":{name:"(anonymous_2)",decl:{start:{line:126,column:20},end:{line:126,column:21}},loc:{start:{line:126,column:24},end:{line:128,column:3}},line:126},"3":{name:"(anonymous_3)",decl:{start:{line:128,column:11},end:{line:128,column:12}},loc:{start:{line:128,column:18},end:{line:132,column:3}},line:128},"4":{name:"(anonymous_4)",decl:{start:{line:151,column:18},end:{line:151,column:19}},loc:{start:{line:151,column:29},end:{line:160,column:1}},line:151},"5":{name:"(anonymous_5)",decl:{start:{line:153,column:20},end:{line:153,column:21}},loc:{start:{line:153,column:30},end:{line:155,column:3}},line:153},"6":{name:"(anonymous_6)",decl:{start:{line:155,column:11},end:{line:155,column:12}},loc:{start:{line:155,column:18},end:{line:159,column:3}},line:155},"7":{name:"(anonymous_7)",decl:{start:{line:184,column:23},end:{line:184,column:24}},loc:{start:{line:184,column:34},end:{line:189,column:1}},line:184},"8":{name:"(anonymous_8)",decl:{start:{line:185,column:42},end:{line:185,column:43}},loc:{start:{line:185,column:54},end:{line:188,column:4}},line:185},"9":{name:"(anonymous_9)",decl:{start:{line:234,column:38},end:{line:234,column:39}},loc:{start:{line:234,column:49},end:{line:239,column:1}},line:234},"10":{name:"(anonymous_10)",decl:{start:{line:235,column:78},end:{line:235,column:79}},loc:{start:{line:235,column:90},end:{line:238,column:4}},line:235},"11":{name:"(anonymous_11)",decl:{start:{line:279,column:26},end:{line:279,column:27}},loc:{start:{line:279,column:37},end:{line:285,column:1}},line:279},"12":{name:"(anonymous_12)",decl:{start:{line:280,column:52},end:{line:280,column:53}},loc:{start:{line:280,column:56},end:{line:284,column:3}},line:280},"13":{name:"(anonymous_13)",decl:{start:{line:281,column:24},end:{line:281,column:25}},loc:{start:{line:281,column:34},end:{line:283,column:5}},line:281},"14":{name:"(anonymous_14)",decl:{start:{line:325,column:23},end:{line:325,column:24}},loc:{start:{line:325,column:34},end:{line:331,column:1}},line:325},"15":{name:"(anonymous_15)",decl:{start:{line:326,column:62},end:{line:326,column:63}},loc:{start:{line:326,column:66},end:{line:330,column:3}},line:326},"16":{name:"(anonymous_16)",decl:{start:{line:327,column:52},end:{line:327,column:53}},loc:{start:{line:327,column:62},end:{line:329,column:5}},line:327},"17":{name:"(anonymous_17)",decl:{start:{line:371,column:16},end:{line:371,column:17}},loc:{start:{line:371,column:20},end:{line:373,column:1}},line:371}},branchMap:{"0":{loc:{start:{line:129,column:4},end:{line:131,column:5}},type:"if",locations:[{start:{line:129,column:4},end:{line:131,column:5}},{start:{line:129,column:4},end:{line:131,column:5}}],line:129},"1":{loc:{start:{line:156,column:4},end:{line:158,column:5}},type:"if",locations:[{start:{line:156,column:4},end:{line:158,column:5}},{start:{line:156,column:4},end:{line:158,column:5}}],line:156},"2":{loc:{start:{line:186,column:5},end:{line:186,column:24}},type:"if",locations:[{start:{line:186,column:5},end:{line:186,column:24}},{start:{line:186,column:5},end:{line:186,column:24}}],line:186},"3":{loc:{start:{line:236,column:5},end:{line:236,column:24}},type:"if",locations:[{start:{line:236,column:5},end:{line:236,column:24}},{start:{line:236,column:5},end:{line:236,column:24}}],line:236}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a5d4b03256fe3bdfc3d0c65b7d4f3b02e95b1434"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2bjogczmt7=function(){return actualCoverage;};}return actualCoverage;}cov_2bjogczmt7();//load express
const express=(cov_2bjogczmt7().s[0]++,require('express'));const app=(cov_2bjogczmt7().s[1]++,express());//middleware
const bodyParser=(cov_2bjogczmt7().s[2]++,require('body-parser'));cov_2bjogczmt7().s[3]++;app.use(bodyParser.json());//load mongoose
const mongoose=(cov_2bjogczmt7().s[4]++,require('mongoose'));//connect
cov_2bjogczmt7().s[5]++;mongoose.connect("mongodb+srv://yash123:yash123@cluster0.an7nj.mongodb.net/servicetrain",()=>{cov_2bjogczmt7().f[0]++;cov_2bjogczmt7().s[6]++;console.log("Train Database Connected Successfully!");});//cors
const cors=(cov_2bjogczmt7().s[7]++,require('cors'));cov_2bjogczmt7().s[8]++;app.use(cors());//swagger
const swaggerJSDoc=(cov_2bjogczmt7().s[9]++,require('swagger-jsdoc'));const swaggerUI=(cov_2bjogczmt7().s[10]++,require('swagger-ui-express'));const swaggerOptions=(cov_2bjogczmt7().s[11]++,{definition:{openapi:'3.0.0',info:{title:'Train Management API',version:'1.0.0',description:'Train Api for train management',contact:{name:'Yash Patil',url:'http://jakeperalta.com',email:'jakeperalta@gmail.com'},servers:["http://localhost:4545"]}},apis:["trains.js"]});const swaggerDocs=(cov_2bjogczmt7().s[12]++,swaggerJSDoc(swaggerOptions));cov_2bjogczmt7().s[13]++;app.use('/api-docs',swaggerUI.serve,swaggerUI.setup(swaggerDocs));cov_2bjogczmt7().s[14]++;require("./Train");const Train=(cov_2bjogczmt7().s[15]++,mongoose.model("Train"));// app.get('/',(req,res)=>{
//   res.send("This is our trains service");
// });
/**
 * @swagger
 * definitions:
 *  Train:
 *   properties:
 *    trainno:
 *     type: number
 *     description: number of the train
 *     example: 987
 *    trainname:
 *     type: string
 *     description: name of the train
 *     example: 'Geetanjali Express'
 *    source:
 *     type: string
 *     description: source of the train
 *     example: 'Mumbai'
 *    destination:
 *     type: string
 *     description: destination of the train
 *     example: 'Pune'
 *    seatavail:
 *     type: number
 *     description: seat availability of the train
 *     example: 109
 *    depttime:
 *     type: string
 *     description: departure time of the train
 *     example: '17:08'
 *    arrivename:
 *     type: string
 *     description: arrival time of the train
 *     example: '18:00'
 *    fare:
 *     type: number
 *     description: Fare of the train
 *     example: 1010
 */ /**
 * @swagger
 * /train:
 *  post:
 *   summary: create train
 *   description: create train for the people
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       $ref: "#/definitions/Train"
 *   responses:
 *    200:
 *     description: train created successully
 *    500:
 *     description: failure in creating train
 */cov_2bjogczmt7().s[16]++;app.post('/train',(req,res)=>{cov_2bjogczmt7().f[1]++;var newTrain=(cov_2bjogczmt7().s[17]++,{trainno:req.body.trainno,trainname:req.body.trainname,source:req.body.source,destination:req.body.destination,seatavail:req.body.seatavail,depttime:req.body.depttime,arrivename:req.body.arrivename,fare:req.body.fare});//create new train
var train=(cov_2bjogczmt7().s[18]++,new Train(newTrain));cov_2bjogczmt7().s[19]++;train.save().then(()=>{cov_2bjogczmt7().f[2]++;cov_2bjogczmt7().s[20]++;console.log("New Train created");}).catch(err=>{cov_2bjogczmt7().f[3]++;cov_2bjogczmt7().s[21]++;if(err){cov_2bjogczmt7().b[0][0]++;cov_2bjogczmt7().s[22]++;throw err;}else{cov_2bjogczmt7().b[0][1]++;}});cov_2bjogczmt7().s[23]++;res.send("A new train created with success!");cov_2bjogczmt7().s[24]++;console.log(req.body);});/**
 * @swagger
 * /trains:
 *  get:
 *   summary: get all trains
 *   description: get all trains
 *   responses:
 *    200:
 *     description: success
 *    500:
 *     description: failure
 */ //view all Trains
cov_2bjogczmt7().s[25]++;app.get('/trains',(req,res)=>{cov_2bjogczmt7().f[4]++;cov_2bjogczmt7().s[26]++;Train.find().then(trains=>{cov_2bjogczmt7().f[5]++;cov_2bjogczmt7().s[27]++;res.json(trains);}).catch(err=>{cov_2bjogczmt7().f[6]++;cov_2bjogczmt7().s[28]++;if(err){cov_2bjogczmt7().b[1][0]++;cov_2bjogczmt7().s[29]++;throw err;}else{cov_2bjogczmt7().b[1][1]++;}});});/**
 * @swagger
 * /train/{trainname}:
 *  get:
 *   summary: get train by train name
 *   description: get  train by train name
 *   parameters:
 *    - in: path
 *      name: trainname
 *      schema:
 *       type: string
 *       required: true
 *       description: name of train
 *       example: 'Mumbai Express'
 *   responses:
 *    200:
 *     description: success
 *    500:
 *     description: failure
 */ //view by train trainname
cov_2bjogczmt7().s[30]++;app.get('/train/:name',(req,res)=>{cov_2bjogczmt7().f[7]++;cov_2bjogczmt7().s[31]++;Train.find({trainname:req.params.name},(err,data)=>{cov_2bjogczmt7().f[8]++;cov_2bjogczmt7().s[32]++;if(err){cov_2bjogczmt7().b[2][0]++;cov_2bjogczmt7().s[33]++;throw err;}else{cov_2bjogczmt7().b[2][1]++;}cov_2bjogczmt7().s[34]++;res.json(data);});});//view by train objectid
// app.get('/trains/:id',(req,res)=>{
//   Train.findById(req.params.id).then((train)=>{
//     if(train){
//       res.json(train);
//     }else{
//       res.send("Invalid id");
//     }
//   }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
/**
 * @swagger
 * /train/{source}/{destination}:
 *  get:
 *   summary: get train by train name
 *   description: get  train by train name
 *   parameters:
 *    - in: path
 *      name: source
 *      schema:
 *       type: string
 *       required: true
 *       description: source of train
 *       example: 'Mumbai'
 *    - in: path
 *      name: destination
 *      schema:
 *       type: string
 *       required: true
 *       description: destination of train
 *       example: 'Pune'
 *   responses:
 *    200:
 *     description: success
 *    500:
 *     description: failure
 */ //train searching using source and destination
cov_2bjogczmt7().s[35]++;app.get('/train/:source/:destination',(req,res)=>{cov_2bjogczmt7().f[9]++;cov_2bjogczmt7().s[36]++;Train.find({source:req.params.source,destination:req.params.destination},(err,data)=>{cov_2bjogczmt7().f[10]++;cov_2bjogczmt7().s[37]++;if(err){cov_2bjogczmt7().b[3][0]++;cov_2bjogczmt7().s[38]++;throw err;}else{cov_2bjogczmt7().b[3][1]++;}cov_2bjogczmt7().s[39]++;res.json(data);});});//train searching using all parameters useful in booking
// app.get('/train/:trainno/:trainname/:source/:destination/:depttime/:arrivename/:fare',(req,res)=>{
//    Train.find({trainno:req.params.trainno,trainname:req.params.trainname,source:req.params.source , destination:req.params.destination,depttime:req.params.depttime,arrivename:req.params.arrivename,fare:req.params.fare},(err,data)=>{
//      if (err) throw err;
//      res.json(data);
//    });
// });
//delete all trains
// app.delete('/train',(req,res)=>{
//   Train.deleteMany({}).then(()=>{
//     Train.find().then((trains)=>{
//       res.json(trains);
//     })
//   })
// });
/**
 * @swagger
 * /train/{trainname}:
 *  delete:
 *   summary: delete train
 *   description: delete train
 *   parameters:
 *    - in: path
 *      name: trainname
 *      schema:
 *       type: string
 *       required: true
 *       description: name of train
 *       example: 'Mumbai Express'
 *   responses:
 *    200:
 *     description: success
 *    500:
 *     description: failure
 */ //delete train by trainname
cov_2bjogczmt7().s[40]++;app.delete('/train/:name',(req,res)=>{cov_2bjogczmt7().f[11]++;cov_2bjogczmt7().s[41]++;Train.deleteOne({trainname:req.params.name}).then(()=>{cov_2bjogczmt7().f[12]++;cov_2bjogczmt7().s[42]++;Train.find({}).then(trains=>{cov_2bjogczmt7().f[13]++;cov_2bjogczmt7().s[43]++;res.json("Deleted Successfully");});});});/**
 * @swagger
 * /train/{trainname}:
 *  put:
 *   summary: update train
 *   description: update train
 *   consumes:
 *    - application/json
 *   produces:
 *    - application/json
 *   parameters:
 *    - in: path
 *      name: trainname
 *      schema:
 *       type: string
 *      required: true
 *      description: name of train
 *      example: 'Geetanjali Express'
 *    - in: body
 *      name: body
 *      required: true
 *      description: body object
 *      schema:
 *       $ref: "#/definitions/Train"
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       $ref: "#/definitions/Train"
 *   responses:
 *    200:
 *     description: success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: "#/definitions/Train"
 */ //update train details by entering trainname and see the updated value
cov_2bjogczmt7().s[44]++;app.put('/train/:name',(req,res)=>{cov_2bjogczmt7().f[14]++;cov_2bjogczmt7().s[45]++;Train.findOneAndUpdate({_id:req.params.name},req.body).then(()=>{cov_2bjogczmt7().f[15]++;cov_2bjogczmt7().s[46]++;Train.findOne({trainname:req.params.name}).then(trains=>{cov_2bjogczmt7().f[16]++;cov_2bjogczmt7().s[47]++;res.json(trains);//returns updated train
});});});// app.put('/train/:name',(req,res)=>{
//   const isExist=Train.findOne({trainname:req.params.name});
//   if(isExist){
//     Train.findOneAndUpdate({trainname:req.params.name},req.body).then(()=>{
//       Train.findOne({trainname:req.params.name}).then((trains)=>{
//         res.json(trains); //returns updated train
//       })
//     })
//   }
//     else{
//       var newTrain={
//         trainno:req.body.trainno,
//         trainname:req.body.trainname,
//         source:req.body.source,
//         destination:req.body.destination,
//         seatavail:req.body.seatavail,
//         depttime:req.body.depttime,
//         arrivename:req.body.arrivename,
//         fare:req.body.fare
//       }
//       //create new train
//       var train=new Train(newTrain)
//
//       train.save().then(()=>{
//         console.log("New Train created")
//       }).catch((err)=>{
//         if (err){
//           throw err;
//         }
//       })
//       res.send("A new train created with success!");
//       console.log(req.body);
//     }
//
//
// });
cov_2bjogczmt7().s[48]++;app.listen(4545,()=>{cov_2bjogczmt7().f[17]++;cov_2bjogczmt7().s[49]++;console.log("Up and running! -- This is our Trains Service");});cov_2bjogczmt7().s[50]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,